/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/select.js":
/*!***********************!*\
  !*** ./src/select.js ***!
  \***********************/
/***/ (() => {

eval("/**\n * Native JS way to pickup all <select> elements which has\n * \"ezmodus-select-picker\" class.\n *\n * Hide default select and inject new div structure with dropdown\n */\n\nclass ezmodusSelectPicker {\n\n    // elements\n    dropdown = null; // div wrapper (ezmodus-select)\n    button = null; // dropdown button (ezmodus-dropdown)\n    select = null; // original select element\n    menu = null; // div menu (ezmodus-menu)\n    // settings\n    settings = {\n        multiple: false,\n        size: null,\n        title: 'Select',\n        dropdownTick: true,\n        selectedMax: null,\n        selectedText: '{0} selected',\n        menuHeight: 0,\n        menuItemHeight: null,\n        searchShow: false,\n        searchInputPlaceHolder: 'Filter...',\n        searchFrom: null,\n        searchNoResultsText: 'No results matched \"{0}\"',\n        clearButtonShow: false,\n        clearButtonText: 'clear selection',\n    };\n    selectedCount = 1;\n    selectedItems = [];\n    // original values without string manipulation\n    originals = [];\n    // only used in search and are lowercased\n    values = [];\n    texts = [];\n    searchString = '';\n\n    constructor(select) {\n        this.select = select;\n        this.settings.multiple = select.multiple;\n        this.settings.size = (select.size || undefined) ?? ((parseInt(this.settings.size)) ? 10 : null);\n        if(select.title) {\n            this.settings.title = select.title;\n        }\n        /**\n         * Example settings from data attributes\n            data-tick=\"false\"\n            data-search=\"true\"\n            data-search-from=\"both\"\n            data-search-placeholder=\"Find...\"\n            data-search-no-results=\"No results for {0}\"\n            data-selected-count=\"5\"\n            data-selected-text=\"{0} selected\"\n            data-selected-max= \"5\"\n            data-clear-show=\"true\"\n            data-clear-text=\"clear\"\n            data-menu-item-height=\"\"\n         */\n        Object.entries(select.dataset).forEach(([data, value]) => {\n            switch(data) {\n                case 'tick':\n                    this.settings.dropdownTick = (value.toLowerCase() === 'false') ? false : true;\n                break;\n                case 'search':\n                        this.settings.searchShow = (value.toLowerCase() === 'true') ? true : false;\n                    break;\n                case 'searchPlaceholder':\n                        this.settings.searchInputPlaceHolder = value;\n                    break;\n                case 'searchFrom':\n                    if(value == 'values') {\n                        this.settings.searchFrom = 'values';\n                    }\n                    else if (value == 'both') {\n                        this.settings.searchFrom = 'both';\n                    }\n                    break;\n                case 'searchNoResults':\n                    this.settings.searchNoResultsText = value;\n                    break;\n                case 'selectedCount':\n                    this.selectedCount = parseInt(value);\n                    break;\n                case 'selectedText':\n                    this.settings.selectedText = value;\n                    break;\n                case 'selectedMax':\n                    this.selectedMax = parseInt(value);\n                    break;\n                case 'clearShow':\n                    this.settings.clearButtonShow = (value === 'true') ? true : false;\n                    break;\n                case 'clearText':\n                    this.settings.clearButtonText = value;\n                    break;\n                case 'menuItemHeight':\n                    this.settings.menuItemHeight = parseInt(value);\n                    break;\n            }\n        });\n        if(select.options.length) {\n            for(let i = 0; i < select.options.length; i++) {\n                this.originals[i] = select.options[i].text;\n                // used for search\n                this.values[i] = select.options[i].value.toLowerCase();\n                this.texts[i] = select.options[i].text.toLowerCase();\n            }\n        }\n        this.render();\n    };\n\n    /**\n     * Actual event for selecting item\n     * To support multiple ways to select\n     * @param {*} picker\n     * @param {*} item\n     */\n    selectMenuItem(picker, e) {\n        let item = this;\n        // Keyboard event\n        if(e.type === 'keydown') {\n            // if not Space then proceed normally, but do not let\n            // rest of the actions happen\n            if(e.code !== 'Space') {\n                return;\n            }\n            // Normally space scrolls the menu if scrollbar exists\n            // prevent this\n            e.preventDefault();\n        }\n        let pos = parseInt(item.dataset.pos);\n        // if not multi selection then wipe out existing select\n        if(!picker.settings.multiple) {\n            let options = picker.select.querySelectorAll('option');\n            let items = Array.from(item.parentNode.children);\n            picker.selectedItems.forEach(function(i) {\n                options[i].selected = null;\n                items[i].classList.remove('selected');\n            });\n            picker.selectedItems = [];\n        }\n        if(item.classList.contains('selected')) {\n            item.classList.remove('selected');\n            picker.select.options[pos].selected = \"\";\n            if(picker.selectedItems.length) {\n                let i = picker.selectedItems.indexOf(pos);\n                picker.selectedItems.splice(i, 1);\n            }\n        }\n        else {\n            let selectedMax = picker.settings.selectedMax;\n            if(selectedMax !== null && picker.selectedItems.length == selectedMax) {\n                return;\n            }\n            item.classList.add('selected');\n            picker.select.options[pos].selected = \"selected\";\n            picker.selectedItems.push(pos);\n        }\n        picker.changeDropdownButton();\n        // close automatically if not multiple select\n        if(!picker.settings.multiple) {\n            picker.dropdown.classList.remove('open-menu');\n        }\n    }\n\n    /**\n     * Add event listeners for the menu item\n     * @param {*} picker dropdown-element\n     * @param {*} item is a-element\n     */\n    addHandlerSelect(picker, item) {\n        item.addEventListener('keydown', this.selectMenuItem.bind(item, picker));\n        item.addEventListener('click', this.selectMenuItem.bind(item, picker));\n    };\n\n    createDropdownButton(dropdown, select) {\n        let picker = this;\n        let button = document.createElement('button');\n        button.type = 'button';\n        button.classList.add('ezmodus-dropdown');\n        button.addEventListener('click', function() {\n            dropdown.classList.toggle('open-menu');\n        });\n        select.classList.forEach(function(klass) {\n            if(klass !== 'ezmodus-select-picker') {\n                button.classList.add(klass);\n            }\n        });\n        let span = document.createElement('span');\n        span.classList.add('text');\n        span.innerText = this.title;\n        button.appendChild(span);\n        if(picker.settings.dropdownTick) {\n            let icon = document.createElement('i');\n            icon.classList.add('tick');\n            button.appendChild(icon);\n        }\n        return button;\n    };\n\n    createClearButton() {\n        let picker = this;\n        let clear = document.createElement('div');\n        clear.classList.add('ezmodus-clear');\n\n        let btn = document.createElement('button');\n        btn.type = 'button';\n        btn.name = 'clear';\n        btn.innerHTML = picker.settings.clearButtonText;\n        btn.addEventListener('click', function(e) {\n            if(picker.selectedItems.length) {\n                let options = picker.select.querySelectorAll('option');\n                let items = btn.closest('.ezmodus-menu').querySelectorAll('li');\n                picker.selectedItems.forEach(function(i) {\n                    options[i].selected = null;\n                    items[i].classList.remove('selected');\n                });\n                picker.selectedItems = [];\n            }\n            picker.changeDropdownButton();\n        });\n        clear.appendChild(btn);\n        return clear;\n    };\n\n    /*\n    Create menu item with structure\n    li > a > span (text) + i (checkmark)\n    */\n    createMenuItem(picker, index, item) {\n        let li = document.createElement('li');\n        li.tabIndex = 0;\n        li.dataset.pos = index;\n\n        if(item.selected) {\n            li.classList.add('selected');\n            picker.selectedItems.push(index);\n        }\n        // handle disabled\n        if(item.disabled) {\n            li.dataset.disabled = \"true\";\n        }\n        // if not disabled add click event to select\n        else {\n            this.addHandlerSelect(picker, li);\n        }\n        item.classList.forEach(function(klass) {\n            li.classList.add(klass);\n        });\n\n        let icon = document.createElement('i');\n        icon.classList.add('checkmark');\n\n        let span = document.createElement('span');\n        span.classList.add('text');\n        span.innerHTML = item.text;\n\n        let a = document.createElement('a');\n\n        // wrap icon and span under div and set them under a-element\n        let wrapper = document.createElement('div');\n        wrapper.classList.add('item-wrapper');\n        wrapper.appendChild(icon);\n        wrapper.appendChild(span);\n        a.appendChild(wrapper);\n\n        // if item <option> has data-attribute \"desc\" then\n        // create extra text area for that information\n        if(item.dataset.desc) {\n            let subtext = document.createElement('div');\n            subtext.classList.add('subtext');\n            subtext.innerHTML = item.dataset.desc;\n            a.appendChild(subtext);\n        }\n        // append the a-element into li-element\n        li.appendChild(a);\n        return li;\n    };\n\n    /**\n     * Search from text and hide necessary objects\n     */\n    addHandlerSearch(picker, menu, event) {\n        let lookfor = '';\n        if(this.value) {\n            lookfor = this.value.toLowerCase();\n        }\n        let indexes = [];\n        // Depending on data \"search from\" value look from texts, values or both\n        // loop picker items to find out which position it holds\n        if(picker.settings.searchFrom == 'both') {\n            picker.values.forEach(function(text, position) {\n                if(text.indexOf(lookfor) !== -1) {\n                    indexes.push(position);\n                }\n            });\n            picker.texts.forEach(function(text, position) {\n                if(text.indexOf(lookfor) !== -1 && !indexes.includes(position)) {\n                    indexes.push(position);\n                }\n            });\n        }\n        else if(picker.settings.searchFrom == 'values') {\n            picker.values.forEach(function(text, position) {\n                if(text.indexOf(lookfor) !== -1) {\n                    indexes.push(position);\n                }\n            });\n        }\n        // default only in texts\n        else {\n            picker.texts.forEach(function(text, position) {\n                if(text.indexOf(lookfor) !== -1) {\n                    indexes.push(position);\n                }\n            });\n        }\n        // now hide the elements which are not in index list\n        menu.querySelectorAll('li').forEach(function(obj) {\n            if(!indexes.includes(parseInt(obj.dataset.pos))) {\n                obj.style.display = 'none';\n            }\n            else {\n                obj.style.display = 'list-item';\n            }\n        });\n        // results text\n        let noresults = menu.querySelector('div.no-results');\n        if(indexes.length) {\n            noresults.innerHTML = '';\n            noresults.style.display = 'none';\n        }\n        else {\n            let msg = picker.settings.searchNoResultsText.replace('{0}', lookfor);\n            noresults.innerHTML = msg;\n            noresults.style.display = 'block';\n        }\n        picker.searchString = lookfor;\n    }\n    createMenu() {\n        let picker = this;\n        let select = this.select;\n        let menu = document.createElement('div');\n        menu.classList.add('ezmodus-menu');\n        menu.tabIndex = -1;\n        // if search is set then create search div\n        // and input under it\n        if(picker.settings.searchShow) {\n            let search = document.createElement('div');\n            search.classList.add('ezmodus-search');\n\n            let input = document.createElement('input');\n            input.type = 'search';\n            input.autocomplete = 'off';\n            input.placeholder = picker.settings.searchInputPlaceHolder;\n            input.addEventListener('keyup', this.addHandlerSearch.bind(input, picker, menu));\n            input.addEventListener('change', this.addHandlerSearch.bind(input, picker, menu));\n            search.appendChild(input);\n            menu.appendChild(search);\n            menu.classList.add('with-search');\n        }\n        // add possibility to clear selection\n        if(picker.settings.multiple && picker.settings.clearButtonShow) {\n            let clear = this.createClearButton();\n            menu.appendChild(clear);\n        }\n        // create list of items from the select\n        let ul = document.createElement('ul');\n        if(select.options.length) {\n            for(let i = 0; i < select.options.length; i++) {\n                let li = this.createMenuItem(picker, i, select.options[i]);\n                ul.appendChild(li);\n            }\n        }\n        menu.appendChild(ul);\n        // add placeholder item for no results text\n        let noresults = document.createElement('div');\n        noresults.classList.add('no-results');\n        menu.appendChild(noresults);\n        this.menu = menu;\n        return menu;\n    };\n\n    changeDropdownButton() {\n        let picker = this;\n        // if no selection then reset\n        if(!picker.selectedItems.length) {\n            picker.button.querySelector('span').innerHTML = picker.settings.title;\n            picker.button.querySelector('span').innerText = picker.settings.title;\n            return;\n        }\n        // show selection as texts\n        if(picker.selectedCount > picker.selectedItems.length -1) {\n            let texts = [];\n            picker.selectedItems.forEach(function(i) {\n                texts.push(picker.originals[i]);\n            });\n            let text = texts.join(', ');\n            picker.button.querySelector('span').innerHTML = text;\n            picker.button.querySelector('span').innerText = text;\n            return;\n        }\n        // otherwise replace with data-count-selected-text\n        let text = picker.settings.selectedText.replace('{0}', picker.selectedItems.length);\n        picker.button.querySelector('span').innerHTML = text;\n        picker.button.querySelector('span').innerText = text;\n    }\n\n    /**\n     * Calculate height for list items based on select size attribute\n     * and if menu item height is given then use it to tweak\n     * @param {*} dropdown\n     */\n    calculateMenuHeight(dropdown) {\n        // calculate height for list items\n        if(this.settings.size) {\n            let el = null;\n            if(el = dropdown.querySelector('li')) {\n                let elHeight = this.settings.menuItemHeight ?? 31;\n                if(el.scrollHeight) {\n                    elHeight = el.scrollHeight;\n                } else if(el.offsetHeight) {\n                    elHeight = el.offsetHeight;\n                } else if(el.clientHeight) {\n                    elHeight = el.clientHeight;\n                }\n                this.settings.menuHeight += (this.settings.size * elHeight);\n            }\n            let menu = dropdown.querySelector('.ezmodus-menu ul');\n            menu.style.maxHeight = this.settings.menuHeight + 2 + 'px';\n        }\n    };\n\n    render() {\n        // Create dropdown frame and set the select element under it\n        let dropdown = document.createElement('div');\n        dropdown.classList.add('ezmodus-select');\n        // Set dropdown before select and then add select into it\n        this.select.parentNode.insertBefore(dropdown, this.select);\n        dropdown.appendChild(this.select);\n        this.button = this.createDropdownButton(dropdown, this.select);\n        dropdown.appendChild(this.button);\n        dropdown.appendChild(this.createMenu());\n        this.changeDropdownButton();\n        this.calculateMenuHeight(dropdown);\n        dropdown.addEventListener('focusout', function(e) {\n            if(!e.currentTarget.contains(e.relatedTarget)) {\n                dropdown.classList.remove('open-menu');\n            }\n        });\n        this.dropdown = dropdown;\n    };\n};\n// pickup all selects with the class and do the transition to new picker\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.querySelectorAll('select.ezmodus-select-picker').forEach(\n        select => new ezmodusSelectPicker(select)\n    );\n});\n\n\n//# sourceURL=webpack://@ezmodus/select-picker/./src/select.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/select.js"]();
/******/ 	
/******/ })()
;